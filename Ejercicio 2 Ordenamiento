#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <float.h>

#define TAM 10000
#define RR 100

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}


void insertionsort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}


int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}


void bubblesort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1])
                swap(&arr[j], &arr[j + 1]);
}


void pet(double times[RR]) {
    for (int i = 0; i < RR; i++) {
        printf("Ejecucion %d: %.2f milisegundos\n", i + 1, times[i]);
    }
}


void pss(double times[RR]) {
    double total = 0;
    double minTime = DBL_MAX;
    double maxTime = 0;

    for (int i = 0; i < RR; i++) {
        total += times[i];

        if (times[i] < minTime) {
            minTime = times[i];
        }
        if (times[i] > maxTime) {
            maxTime = times[i];
        }
    }

    printf("Tiempo promedio: %.2f milisegundos\n", total / RR);
    printf("Tiempo minimo: %.2f milisegundos\n", minTime);
    printf("Tiempo maximo: %.2f milisegundos\n", maxTime);
}

int main() {
    srand(time(NULL));

    int arr[TAM];
    clock_t start_time, end_time;

    
    double insertionsortt[RR];
    for (int i = 0; i < RR; i++) {
        for (int j = 0; j < TAM; j++) {
            arr[j] = rand() % 10000;
        }
        start_time = clock();
        insertionsort(arr, TAM);
        end_time = clock();
        insertionsortt[i] = ((double)(end_time - start_time)) / CLOCKS_PER_SEC * 1000.0;
    }

    printf("Insertion Sort:\n");
    pet(insertionsortt);
    pss(insertionsortt);

    
    double quickSortTimes[RR];
    for (int i = 0; i < RR; i++) {
        for (int j = 0; j < TAM; j++) {
            arr[j] = rand() % 10000;
        }
        start_time = clock();
        quickSort(arr, 0, TAM - 1);
        end_time = clock();
        quickSortTimes[i] = ((double)(end_time - start_time)) / CLOCKS_PER_SEC * 1000.0;
    }                      
	printf("---------------------------------------------");
    printf("\nQuick Sort:\n");
    pet(quickSortTimes);
    pss(quickSortTimes);

   
    double bubblesortt[RR];
    for (int i = 0; i < RR; i++) {
        for (int j = 0; j < TAM; j++) {
            arr[j] = rand() % 10000;
        }
        start_time = clock();
        bubblesort(arr, TAM);
        end_time = clock();
        bubblesortt[i] = ((double)(end_time - start_time)) / CLOCKS_PER_SEC * 1000.0;
    }                     
	printf("---------------------------------------------");
    printf("\nBubble Sort:\n");
    pet(bubblesortt);
    pss(bubblesortt);

    return 0;
}
